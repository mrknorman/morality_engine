use phf::phf_map;

pub fn get_letter(keyword: char) -> String {
   // If MERLIN.get(keyword) returns Option<&'static str>:
   MERLIN.get(&keyword).map_or_else(
       || { 
           eprintln!("Warning: No letter found for '{}'", keyword); 
           DEFAULT.to_string() 
       },
       |s| s.to_string()
   )
}

pub fn get_vector(text : String) -> Vec<String> {
   text.chars().map(|c| get_letter(c)).collect()
}

const DEFAULT : &str = r#"Merlin set missing character!
             
             
             
             
             
             
             "#;

static MERLIN : phf::Map<char, &'static str> = phf_map! {
'A' => r#"      __      
     /""\     
    /    \    
   /' /\  \   
  //  __'  \  
 /   /  \\  \ 
(___/    \___)
              "#,

'B' => r#"_______   
|   _  "\  
(. |_)  :) 
|:     \/  
(|  _  \\  
|: |_)  :) 
(_______/  
           "#,

'C' => r#"  ______   
 /" _  "\  
(: ( \___) 
 \/ \      
 //  \ _   
(:   _) \  
 \_______) 
           "#,

'D' => r#" ________   
|"      "\  
(.  ___  :) 
|: \   ) || 
(| (___\ || 
|:       :) 
(________/  
            "#,

'E' => r#"  _______   
 /"     "| 
(: ______) 
 \/    |   
 // ___)_  
(:      "| 
 \_______) 
           "#,

'F' => r#"  _______  
 /"     "| 
(: ______) 
 \/    |   
 // ___)   
(:  (      
 \__/      
           "#,

'G' => r#"  _______   
 /" _   "|  
(: ( \___)  
 \/ \       
 //  \ ___  
(:   _(  _| 
 \_______)  
            "#,

'H' => r#"  __    __   
 /" |  | "\  
(:  (__)  :) 
 \/      \/  
 //  __  \\  
(:  (  )  :) 
 \__|  |__/  
             "#,

'I' => r#"  __     
 |" \   
 ||  |  
 |:  |  
 |.  |  
 /\  |\ 
(__\_|_)
      "#,

'J' => r#"      ___ 
     |"  |
     ||  |
     |:  |
  ___|  / 
 /  :|_/ )
(_______/ 
         "#,

'K' => r#" __   ___  
|/"| /  ") 
(: |/   /  
|    __/   
(// _  \   
|: | \  \  
(__|  \__) 
           "#,

'L' => r#" ___       
|"  |      
||  |      
|:  |      
 \  |___   
( \_|:  \  
 \_______) 
           "#,

'M' => r#" ___      ___ 
|"  \    /"  |
 \   \  //   |
 /\\  \/.    |
|: \.        |
|.  \    /:  |
|___|\__/|___|
              "#,

'N' => r#" _____  ___  
(\"   \|"  \  
|.\\   \    | 
|: \.   \\  | 
|.  \    \. | 
|    \    \ | 
 \___|\____\) 
              "#,

'O' => r#"     ______  
    /    " \   
   // ____  \  
  /  /    ) :) 
 (: (____/ //  
  \        /   
   \"_____/    
               "#,

'P' => r#"   _______   
  |   __ "\  
  (. |__) :) 
  |:  ____/  
  (|  /      
 /|__/ \     
(_______)    
             "#,

'Q' => r#"    ______    
   /    " \   
  // ____  \  
 /  /    )  ) 
(: (____/ //  
 \         \  
  \"____/\__\ 
              "#,

'R' => r#"  _______  
 /"      \  
|:        | 
|_____/   ) 
 //      /  
|:  __   \  
|__|  \___) 
            "#,

'S' => r#"  ________  
 /"       ) 
(:   \___/  
 \___  \    
  __/  \\   
 /" \   :)  
(_______/   
            "#,

'T' => r#" ___________ 
("     _   ")
 )__/  \\__/ 
    \\_ /    
    |.  |    
    \:  |    
     \__|    
             "#,

'U' => r#" ____  ____  
("  _||_ " | 
|   (  ) : | 
(:  |  | . ) 
 \\ \__/ //  
 /\\ __ //\  
(__________) 
             "#,

'V' => r#" ___      ___ 
|"  \    /"  |
 \   \  //  / 
  \\  \/. ./  
   \.    //   
    \\   /    
     \__/     
              "#,

'W' => r#" __   __  ___ 
|"  |/  \|  "|
|'  /    \:  |
|: /'        |
 \//  /\'    |
 /   /  \\   |
|___/    \___|
              "#,

'X' => r#" ___  ___  
|"  \/"  | 
 \   \  /  
  \\  \/   
  /\.  \   
 /  \   \  
|___/\___| 
           "#,

'Y' => r#" ___  ___  
|"  \/"  | 
 \   \  /  
  \\  \/   
  /   /    
 /   /     
|___/      
           "#,

'Z' => r#" ________   
("      "\  
 \___/   :) 
   /  ___/  
  //  \__   
 (:   / "\  
  \_______) 
            "#,

'0' => r#"    ______    
   /    " \   
  // ____  \  
 /  /    ) :) 
(: (____/ //  
 \        /   
  \"_____/    
              "#,

'1' => r#"   ____    
  /  " \   
 /__|| |   
    |: |   
   _\  |   
  /" \_|\  
 (_______) 
           "#,

'2' => r#"  _______    
 /"     "\   
(__/\    :)  
    / ___/   
   // \___   
  (:  /  "\  
   \_______) 
             "#,

'3' => r#"  _______  
 /" __   ) 
(__/ _) ./ 
    /  //  
 __ \_ \\  
(: \__) :\ 
 \_______) 
           "#,

'4' => r#" ___  ___    
(: "||_  |   
|  (__) :|   
 \____  ||   
     _\ '|   
    /" \_|\  
   (_______) 
             "#,

'5' => r#"   ________  
  /"      ") 
 (:   //\_/  
  \___ \     
  __ | \\    
 /" \/  :)   
(_______/    
             "#,

'6' => r#"    ___     
   /. ")    
  /:  /     
 //  /___   
(   / _  \  
|:   /_) :) 
 \_______/  
            "#,

'7' => r#" _________  
("       "\ 
 \___/   :/ 
    /   //  
  __\  ./   
 (:  \_/ \  
  \_______) 
            "#,

'8' => r#"  _______   
 /"  _  \\  
|:  _ /  :| 
 \___/___/  
 //  /_ \\  
|:  /_   :| 
 \_______/  
            "#,

'9' => r#"  _______    
 /" _   "\   
(: (_/  :|   
 \____/ |)   
    _\  '|   
   /" \__|\  
  (________) 
             "#,

'?' => r#" ________   
("      "\  
 \___/   :) 
   /  ___/  
  //  \     
 ('___/     
  (___)     
            "#,

'!' => r#"    ___  
   |"  | 
   ||  | 
   |:  | 
  _|  /  
 / |_/ ) 
(_____/  
         "#,

'"' =>  r#"  ____ _____  
 ))_ ")))_ ") 
(____((____(  
              
              
              
              
              "#,

'%' => r#"  ____  ___   
 ))_ ")/"  |  
(____(/  //   
     /'  /    
    //  /____ 
   /  //))_ ")
  |___/(____( 
              "#,

'^' => r#"   __    
  /""\   
 //   \  
/'_/\_\\ 
         
         
         
         "#,

'(' =>  r#"    ____  
   /   ") 
  /. __/  
 // /     
(: (___   
 \     )  
  \"__/   
          "#,

')' => r#"  ____    
 (  " \   
  \__. \  
     ) :) 
  __/ //  
 /"   /   
(____/    
          "#,

'[' => r#"  ________  
 /"      ") 
(:   \___/  
//   /      
\\   \___   
(:   /  "\  
 \________) 
            "#,

']' => r#" ________   
("      "\  
 \___/   :) 
     \   \\ 
  ___/   // 
 /"  \   :) 
(________/  
            "#,

'=' => r#"  _______  
 ))_    ") 
(_______(  
 ________  
 ))_    ") 
(_______(  
           
           "#,

':' => r#"  ____  
 ))_ ") 
(____(  
 _____  
 ))_ ") 
(____(  
        
        "#,

';' => r#"   ____  
  ))_ ") 
 (____(  
  ____   
 //  ")  
(____/   
         
         "#,

',' => r#"         
         
         
         
  _____  
 //   ") 
(_____/  
         "#,

'.' => r#"         
         
         
         
  _____  
 ))_  ") 
(_____(  
         "#,

'\'' => r#"  ____  
 ))_ ") 
(____(  
        
        
        
        
        "#,
       
' ' => r#"      
      
      




      "#
};



                       
           


           

